
==================== FINAL INTERFACE ====================
2017-02-03 09:17:02.060623 UTC

interface main@main:Main 8001
  interface hash: 82c63d3eea72358a7c86e5942b624cff
  ABI hash: 8a48242a721438ecbb112e107bfe19e8
  export-list hash: b8d6b4a4f5a0f0505ed6a495da59f7f9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1e516fe6eac2a47a19b4d34a3c45fb95
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.doArray
  Main.func
  Main.main
  Main.unpack'
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cairo-0.13.3.1@cairo-0.13.3.1-JCOGHyRY3Mk6Meqo26pJOl
                      containers-0.5.7.1@containers-0.5.7.1
                      csv-0.1.0.0@csv-0.1.0.0-9qMjpc3zIUKd0Gzad6vn7
                      datetime-0.3.1@datetime-0.3.1-1illPLNI4TGLw9vIYlF0w9
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      gio-0.13.3.1@gio-0.13.3.1-L46jfSTCWwIttkgLYz3ht
                      glib-0.13.4.1@glib-0.13.4.1-LHb10HBfEaUfMcseRRiwA
                      gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG integer-gmp-1.0.0.1
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pango-0.13.3.1@pango-0.13.3.1-E0wlbzyXi8v6QUTrPI8Eko
                      strings-1.1@strings-1.1-6zFVTH2qbNe5LgzqvDwgo
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Entry.Entry
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Entry.SpinButton
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.General.IconFactory
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.General.Structs
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.ModelView.CellLayout
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.ModelView.TreeModel
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.ModelView.TreeModelFilter
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.ModelView.TreeModelSort
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Printing.PrintOperation
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Selectors.FileChooserButton
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Selectors.FileChooserDialog
         gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk.Selectors.FileChooserWidget
         pango-0.13.3.1@pango-0.13.3.1-E0wlbzyXi8v6QUTrPI8Eko:Graphics.Rendering.Pango.Font
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  csv-0.1.0.0@csv-0.1.0.0-9qMjpc3zIUKd0Gzad6vn7:Lib 298ce87a109569d378a4768156eabf50
import  -/  datetime-0.3.1@datetime-0.3.1-1illPLNI4TGLw9vIYlF0w9:Data.DateTime b5c3825519e19e2ebd9fed651f3e3889
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  gtk-0.14.6@gtk-0.14.6-IbWqpccnfiq4Ig0EtOjCRG:Graphics.UI.Gtk d8ccb5fbca94717542161ffa48745c3f
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 62c0e736506aac47ef40569f5b82e19d
import  -/  strings-1.1@strings-1.1-6zFVTH2qbNe5LgzqvDwgo:Data.Strings 07fb60caf13d6861720a086b37665a03
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text 6515f3179e27a91345842b6e634f584c
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.IO 4bbe6162b66e24a3ce48e078208c8e49
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Internal 530216acfbfab25df053b0caac6d6a57
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show c6fc4b1a4431943028eb6eb78b495e09
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
16af8adda2a516fc192720f5729b52f0
  $wfunc ::
    Data.Text.Internal.Text
    -> (# Data.Text.Internal.Text, Data.Text.Internal.Text,
          Data.DateTime.DateTime #)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text) ->
                 let {
                   zFilter :: [Data.Text.Internal.Text]
                   = case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     GHC.List.filter
                       @ Data.Text.Internal.Text
                       Main.func5
                       (Data.Text.$wgroupBy Main.func4 ww1 ww2 ww3) }
                 } in
                 (# GHC.List.$w!! @ Data.Text.Internal.Text zFilter 0#,
                    GHC.List.$w!! @ Data.Text.Internal.Text zFilter 1#,
                    case Data.DateTime.$wfromSeconds
                           (case Text.Read.readEither6
                                   @ GHC.Integer.Type.Integer
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Integer.Type.Integer
                                      Main.func3
                                      (case GHC.List.$w!!
                                              @ Data.Text.Internal.Text
                                              zFilter
                                              0# of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                                       let {
                                         end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                       } in
                                       letrec {
                                         $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                           {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                         = \ (ww :: GHC.Prim.Int#) ->
                                           case GHC.Prim.tagToEnum#
                                                  @ GHC.Types.Bool
                                                  (GHC.Prim.>=# ww end) of wild1 {
                                             GHC.Types.False
                                             -> case GHC.Prim.indexWord16Array#
                                                       dt
                                                       ww of r# { DEFAULT ->
                                                case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.geWord# r# 55296##) of wild2 {
                                                  GHC.Types.False
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       (GHC.Types.C#
                                                          (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                       ($wunfold (GHC.Prim.+# ww 1#))
                                                  GHC.Types.True
                                                  -> case GHC.Prim.tagToEnum#
                                                            @ GHC.Types.Bool
                                                            (GHC.Prim.leWord# r# 56319##) of wild3 {
                                                       GHC.Types.False
                                                       -> GHC.Types.:
                                                            @ GHC.Types.Char
                                                            (GHC.Types.C#
                                                               (GHC.Prim.chr#
                                                                  (GHC.Prim.word2Int# r#)))
                                                            ($wunfold (GHC.Prim.+# ww 1#))
                                                       GHC.Types.True
                                                       -> case GHC.Prim.indexWord16Array#
                                                                 dt
                                                                 (GHC.Prim.+#
                                                                    ww
                                                                    1#) of r#1 { DEFAULT ->
                                                          GHC.Types.:
                                                            @ GHC.Types.Char
                                                            (GHC.Types.C#
                                                               (GHC.Prim.chr#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.+#
                                                                        (GHC.Prim.uncheckedIShiftL#
                                                                           (GHC.Prim.-#
                                                                              (GHC.Prim.word2Int#
                                                                                 r#)
                                                                              55296#)
                                                                           10#)
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.word2Int# r#1)
                                                                           56320#))
                                                                     65536#)))
                                                            ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                             GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                       } in
                                       $wunfold dt1 })) of wild {
                              [] -> Main.func2
                              : x ds
                              -> case ds of wild1 {
                                   [] -> x : ipv ipv1 -> Main.func1 } }) of ww { (#,#) ww1 ww2 ->
                    Data.Time.Clock.UTC.UTCTime ww1 ww2 } #)) -}
e683d654339739410eda5f7d66da252a
  $wunpack' ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.DateTime.DateTime
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String,
          (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
           GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Data.DateTime.DateTime) ->
                 (# case ww of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                    let {
                      end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                    } in
                    letrec {
                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                      = \ (ww3 :: GHC.Prim.Int#) ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.>=# ww3 end) of wild1 {
                          GHC.Types.False
                          -> case GHC.Prim.indexWord16Array# dt ww3 of r# { DEFAULT ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.geWord# r# 55296##) of wild2 {
                               GHC.Types.False
                               -> GHC.Types.:
                                    @ GHC.Types.Char
                                    (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                    ($wunfold (GHC.Prim.+# ww3 1#))
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.leWord# r# 56319##) of wild3 {
                                    GHC.Types.False
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                         ($wunfold (GHC.Prim.+# ww3 1#))
                                    GHC.Types.True
                                    -> case GHC.Prim.indexWord16Array#
                                              dt
                                              (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C#
                                            (GHC.Prim.chr#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftL#
                                                        (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                        10#)
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                  65536#)))
                                         ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                          GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                    } in
                    $wunfold dt1 },
                    case ww1 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                    let {
                      end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                    } in
                    letrec {
                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                      = \ (ww3 :: GHC.Prim.Int#) ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.>=# ww3 end) of wild1 {
                          GHC.Types.False
                          -> case GHC.Prim.indexWord16Array# dt ww3 of r# { DEFAULT ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.geWord# r# 55296##) of wild2 {
                               GHC.Types.False
                               -> GHC.Types.:
                                    @ GHC.Types.Char
                                    (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                    ($wunfold (GHC.Prim.+# ww3 1#))
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.leWord# r# 56319##) of wild3 {
                                    GHC.Types.False
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                         ($wunfold (GHC.Prim.+# ww3 1#))
                                    GHC.Types.True
                                    -> case GHC.Prim.indexWord16Array#
                                              dt
                                              (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C#
                                            (GHC.Prim.chr#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftL#
                                                        (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                        10#)
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                  65536#)))
                                         ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                          GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                    } in
                    $wunfold dt1 },
                    Data.Time.LocalTime.LocalTime.$fShowUTCTime_$cshow ww2,
                    Data.DateTime.toGregorian ww2 #)) -}
17ef3430323bf036af4bb61c69ba8280
  doArray ::
    [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text,
         Data.DateTime.DateTime)]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: [Data.Text.Internal.Text]) ->
                 GHC.Base.build
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text,
                      Data.DateTime.DateTime)
                   (\ @ b1
                      (c :: (Data.Text.Internal.Text, Data.Text.Internal.Text,
                             Data.DateTime.DateTime)
                            -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Data.Text.Internal.Text
                      @ b1
                      (GHC.Base.mapFB
                         @ (Data.Text.Internal.Text, Data.Text.Internal.Text,
                            Data.DateTime.DateTime)
                         @ b1
                         @ Data.Text.Internal.Text
                         c
                         Main.func)
                      n
                      a)) -}
8c2a5231bd9eaf510c95a626508aea5d
  func ::
    Data.Text.Internal.Text
    -> (Data.Text.Internal.Text, Data.Text.Internal.Text,
        Data.DateTime.DateTime)
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case Main.$wfunc w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
f0b175226e74d22179bbd016f602b898
  func1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
80053426f1ba0685bdd56c41c31b7d37
  func2 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
fce1cb04e1ca9ecb8259043411591136
  func3 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: ((GHC.Read.$fReadInteger3
                    GHC.Read.$fReadInteger_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0]
                      <GHC.Integer.Type.Integer>_R)
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
581aab942037c51e24778508768d8e10
  func4 :: GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><L,1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Char) (y :: GHC.Types.Char) ->
                 case x of wild { GHC.Types.C# x1 ->
                 case x1 of wild1 {
                   DEFAULT
                   -> case y of wild2 { GHC.Types.C# x2 ->
                      case x2 of wild3 {
                        DEFAULT -> GHC.Types.True ','# -> GHC.Types.False } }
                   ','# -> GHC.Types.False } }) -}
ecc1a12bd9afaab8a6dd98f898f3b784
  func5 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 Data.Text.$fEqText_$c/= x Main.func6) -}
38105041eec2b3f6d88cb8b63e931252
  func6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ","#) -}
0a95cca2b50d5407e4549160770781e5
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ed72e3c731f330be0868daf619507696
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.main5
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Data.Text.IO.getContents2 ipv1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case ipv3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                         GHC.Show.showList__
                           @ ([GHC.Types.Char], [GHC.Types.Char], [GHC.Types.Char],
                              (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
                               GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
                           Main.main4
                           (GHC.Base.map
                              @ Data.Text.Internal.Text
                              @ (GHC.Base.String, GHC.Base.String, GHC.Base.String,
                                 (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
                                  GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
                              Main.main3
                              (Data.Text.$wlines ww1 ww2 ww3))
                           (GHC.Types.[] @ GHC.Types.Char) })
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv4 } } }) -}
ef778d722205e911b5e8dd835700db89
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "End"#) -}
66a6c2355cd44afd9129f0dfe64716cc
  main3 ::
    Data.Text.Internal.Text
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String,
        (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
         GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
  {- Arity: 1,
     Unfolding: (\ (x :: Data.Text.Internal.Text) ->
                 case Main.$wfunc x of ww { (#,,#) ww1 ww2 ww3 ->
                 case Main.$wunpack' ww1 ww2 ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
bcd6a318f7be0655bfea1de2c3a47e6d
  main4 ::
    ([GHC.Types.Char], [GHC.Types.Char], [GHC.Types.Char],
     (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
      GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2 -}
5471d773d9f640455e327037126c2027
  main5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pomodoros.csv"#) -}
904101c9b0f7da27bdd3d06681d72efb
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
9ba7fc066749d66d9f200476f762f82d
  unpack' ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text,
     Data.DateTime.DateTime)
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String,
        (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int,
         GHC.Types.Int, GHC.Types.Int, GHC.Types.Int))
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),U(U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Text.Internal.Text, Data.Text.Internal.Text,
                          Data.DateTime.DateTime)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Main.$wunpack' ww1 ww2 ww3 of ww4 { (#,,,#) ww5 ww6 ww7 ww8 ->
                 (ww5, ww6, ww7, ww8) } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

